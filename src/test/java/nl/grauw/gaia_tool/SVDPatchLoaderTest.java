package nl.grauw.gaia_tool;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.junit.Test;

public class SVDPatchLoaderTest {

	static int[] testSVDHeader = {
		0x00, 0x1E, 0x53, 0x56, 0x44, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x50, 0x41, 0x54, 0x61, 0x53, 0x48, 0x30, 0x31, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xE2, 0x10,
		0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x88, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00
	};
	
	static int[] testSVDData = {
		0xA9, 0x97, 0x9F, 0x44, 0x14, 0x30, 0xF4, 0xC7, 0xA1, 0x6A, 0xDF, 0xE2, 0x48, 0xBF, 0x3F, 0x17,
		0x13, 0x5D, 0x72, 0xAA, 0xAF, 0xDF, 0x9E, 0xFD, 0x79, 0xF0, 0xFD, 0xF3, 0xD0, 0x00, 0xC1, 0x3C,
		0x0E, 0xFF, 0xFB, 0xEF, 0xC7, 0xF3, 0xED, 0x67, 0xDE, 0xBC, 0xF8, 0xEF, 0xD9, 0xEF, 0x57, 0x9D,
		0x39, 0xF2, 0xE2, 0x02, 0xF0, 0xC7, 0x7D, 0xDB, 0xA7, 0x2E, 0x1E, 0xE4, 0xF6, 0xDB, 0xB6, 0x6A,
		0xD1, 0x9B, 0x26, 0x2C, 0x17, 0x66, 0xBD, 0x5A, 0x57, 0xAE, 0xC1, 0x3C, 0x0E, 0xFF, 0xFB, 0xEF,
		0xC7, 0xF3, 0xED, 0x67, 0xDE, 0xBC, 0xF8, 0xEF, 0xD9, 0xEF, 0x57, 0x9D, 0x39, 0xF2, 0xE2, 0x02,
		0xF0, 0xC7, 0x7D, 0xDB, 0xA7, 0x2E, 0x1E, 0xE4, 0xF6, 0xDB, 0xB6, 0x6A, 0xD1, 0x9B, 0x26, 0x2C,
		0x17, 0x66, 0xBD, 0x5A, 0x57, 0xAE, 0xC1, 0x3C, 0x0E, 0xFF, 0xFB, 0xEF, 0xC7, 0xF3, 0xED, 0x67,
		0xDE, 0xBC, 0xF8, 0xEF, 0xD9, 0xEF, 0x57, 0x9D, 0x39, 0xF2, 0xE2, 0x02, 0xF0, 0xC7, 0x7D, 0xDB,
		0xA7, 0x2E, 0x1E, 0xE4, 0xF6, 0xDB, 0xB6, 0x6A, 0xD1, 0x9B, 0x26, 0x2C, 0x17, 0x66, 0xBD, 0x5A,
		0x57, 0xAE, 0x07, 0x00, 0xFF, 0x00, 0xFD, 0x00, 0x0B, 0x00, 0xF8, 0x63, 0xC1, 0x9C, 0x40, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x95,
		0xFD, 0x75, 0x7C, 0x00, 0x07, 0x00, 0xFF, 0x00, 0x2F, 0x00, 0x65, 0x00, 0xF8, 0x63, 0xC1, 0x9C,
		0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x95, 0xFD, 0x75, 0x7C, 0x00, 0x05, 0x00,
		0xFF, 0x00, 0xFD, 0x00, 0x1D, 0x00, 0xF9, 0x00, 0x17, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x95, 0xFD, 0x75, 0x7C, 0x00, 0x03, 0x00, 0xFF, 0x00, 0xFD, 0x00, 0x05, 0x00,
		0xF8, 0x63, 0xC1, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x95, 0xFD, 0x75,
		0x7C, 0x00, 0x10, 0x24, 0x59, 0xC8, 0x00, 0x60, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00,
		0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
		0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00,
		0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
		0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x3C, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00
	};
	
	public InputStream createSVDInputStream() {
		byte[] svdData = new byte[testSVDHeader.length + 64 * testSVDData.length];
		
		int dataIndex = 0;
		for (int i = 0; i < testSVDHeader.length; i++)
			svdData[dataIndex++] = (byte)testSVDHeader[i];
		
		for (int j = 0; j < 64; j++)
			for (int i = 0; i < testSVDData.length; i++)
				svdData[dataIndex++] = (byte)testSVDData[i];
		
		return new ByteArrayInputStream(svdData);
	}
	
	@Test
	public void testLoadInputStream() throws IOException {
		Patch original = PatchTest.createTestPatch();
		Patch loaded = new Patch();
		SVDPatchLoader loader = new SVDPatchLoader(loaded);
		loader.load(createSVDInputStream());
		
		assertTrue(original.isEqualTo(loaded));
	}
	
}
